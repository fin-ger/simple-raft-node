apiVersion: v1
kind: ConfigMap
metadata:
  name: game-config
data:
  game.properties: |
    enemies=aliens
    lives=3
    enemies.cheat=true
    enemies.cheat.level=noGoodRotten
    secret.code.passphrase=UUDDLRLRBABAS
    secret.code.allowed=true
    secret.code.lives=30
  ui.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true
    how.nice.to.look=fairlyNice
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "simple-raft-node-example.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "simple-raft-node-example.name" . }}
    helm.sh/chart: {{ include "simple-raft-node-example.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  serviceName: {{ include "simple-raft-node-example.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "simple-raft-node-example.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "simple-raft-node-example.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: fin1ger/simple-raft-node:example-helm
          imagePullPolicy: Always
          env:
            - name: NODE_PORT
              value: 1337
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ROCKET_PORT
              value: 8080
            - name: NODE_GATEWAY
              value: {{ include "simple-raft-node-example.fullname" . }}:1337
            - name: RUST_LOG
              value: info
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: raft
              containerPort: 1337
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
